import streamlit as st
import pandas as pd
import random

def show_model_development():
    st.markdown("""<h1 style='font-family: Athiti; text-align: center;'>Algorithm & Model Development</h1>""", unsafe_allow_html=True)
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "Data Preprocessing",
        "Detail of DataSet (Classical)",
        "Detail of DataSet (NN)",
        "Development Model",
        "Theory of ML Model"
    ])
    
    with tab1:
        st.markdown("""<h4 style='font-family: Athiti; text-align: center;text-indent: 2.5em;'>
    Data Preprocessingüìë
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preprocessing)
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                       ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö
                    <span style="background-color: #990000;">‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ 
                    ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏õ‡∏µ 2000 ‡∏ñ‡∏∂‡∏á 2024</span>
                    ‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                    ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡πÅ‡∏•‡∏∞‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏£‡∏±‡∏ê‡∏ö‡∏≤‡∏• 
                    ‡πÅ‡∏ï‡πà‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏°‡∏¥‡∏ï‡∏¥ ‡πÄ‡∏£‡∏≤‡∏à‡∏∂‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏°‡∏ï‡∏¥ (synthetic dataset) ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    - ‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏•‡∏û‡∏¥‡∏© (Pollution Control Department) ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 2 ‡∏•‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ <br>
                    - Greenpeace Thailand ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏¢‡∏∞‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏¥‡πâ‡∏á (Single-use Plastics) ‡∏ã‡∏∂‡πà‡∏á‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡∏ß‡∏î‡∏ô‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ <br>
                    - ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÇ‡∏•‡∏Å (World Bank) ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡πÑ‡∏ó‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 62 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏õ‡∏µ 2000 ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á <br>
    </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á DataSet
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Code Gen ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ ‡∏ù‡∏∂‡∏Å‡∏ù‡∏ô Model Machine Learning <br>
                    ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 2-5% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏ï‡∏≤‡∏°‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (¬±20 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á <br>
                    ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•: ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ä‡πâ‡∏≤‡∏Å‡∏ß‡πà‡∏≤ (1-3% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ) ‡πÅ‡∏ï‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏•‡∏à‡∏≤‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô (2020-2024) <br>
                    ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£: ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° 0.1-0.3% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á <br>
                    ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•: ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô 0-100 ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 20 ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏° <br>
    </p>""", unsafe_allow_html=True)
        code = '''import pandas as pd
import random

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ 2000-2024
years = list(range(2000, 2025))
months = list(range(1, 13))
data = []

# ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ 2000
base_waste = 150  # ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
base_recycle_rate = 30  # ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
base_population = 62  # ‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ô (‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô‡∏õ‡∏µ 2000)

# ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (0 = ‡πÑ‡∏°‡πà‡∏°‡∏µ, 1 = ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô, 2 = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á, 3 = ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô)
policy_levels = {2000: 0, 2005: 1, 2010: 1, 2015: 2, 2020: 3}

for year in years:
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏µ
    policy = 0
    for policy_year in sorted(policy_levels.keys()):
        if year >= policy_year:
            policy = policy_levels[policy_year]
    
    for month in months:
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏ß‡∏î‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 2-5% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
        waste_growth = random.uniform(0.02, 0.05) / 12
        plastic_waste = base_waste * (1 + waste_growth) ** ((year - 2000) * 12 + month - 1) + random.uniform(-20, 20)
        plastic_waste = max(0, plastic_waste) if random.random() > 0.1 else None  # 10% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô None
        
        # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 1-3% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ + ‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
        recycle_increase = (random.uniform(0.01, 0.03) + policy * 0.005) / 12
        recycle_rate = base_recycle_rate * (1 + recycle_increase) ** ((year - 2000) * 12 + month - 1) + random.uniform(-10, 10)
        recycle_rate = max(0, recycle_rate) if random.random() > 0.15 else None  # 15% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô None
        
        # ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö)
        recycling_percentage = (recycle_rate / plastic_waste * 100) if (plastic_waste is not None and recycle_rate is not None and plastic_waste > 0) else None
        
        # ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 100)
        recycling_trend = min(100, 20 + ((year - 2000) * 12 + month - 1) * random.uniform(0.1, 0.3) + policy * 5 + random.uniform(-5, 5))
        recycling_trend = recycling_trend if random.random() > 0.1 else None  # 10% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô None
        
        # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 0.1-0.3% ‡∏ï‡πà‡∏≠‡∏õ‡∏µ)
        pop_growth = random.uniform(0.001, 0.003) / 12
        population = base_population * (1 + pop_growth) ** ((year - 2000) * 12 + month - 1)
        population = population if random.random() > 0.05 else None  # 5% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô None
        
        # ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏£‡∏ö)
        policy_value = policy
        
        data.append([f"{year}-{month:02d}", plastic_waste, recycle_rate, recycling_percentage, recycling_trend, population, policy_value])

# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
df = pd.DataFrame(data, columns=[
    "Date", 
    "Plastic Bottle Waste Generated (Million Bottles)", 
    "Recycling Rate (Million Bottles)", 
    "Recycling Percentage (%)", 
    "Recycling Trend (0-100)",
    "Population (Million)",
    "Recycling Policy Level (0-3)"
])

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô CSV
df.to_csv("thai_plastic_bottle_waste_monthly_dataset_with_missing.csv", index=False)

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
print(df.head())

# ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
print(" Missing Values in Each Column:")
print(df.isnull().sum())'''
        st.code(code, language="python", line_numbers=True, wrap_lines=False, height=700)
        st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Athiti:wght@400&display=swap');
        .about-container {
            text-align: center;
            font-family: 'Athiti', sans-serif !important;
            font-size: 16px;
            font-weight: 400;
            line-height: 1.6;
            color: #ffffff;
        }
        .about-container h5 {
            font-family: 'Athiti', sans-serif !important;
            font-size: 20px;
            color: #ffffff;
            margin: 0;
        }
        .stApp {
            background-color: #121212;
        }
    </style>
    <div class="about-container">
        <h5>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Code Python ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á DataSet</h5>
    </div>
""", unsafe_allow_html=True)
    
    with tab2:
        st.markdown("""<h4 style='font-family: Athiti; text-align: center;text-indent: 2.5em;'>
    Detail of DataSet (Classical)üß∏
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    - <span style="font-weight: bold;">Date</span> ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ ‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• <br>
                    - <span style="font-weight: bold;">Plastic Bottle Waste Generated</span> ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏Ç‡∏¢‡∏∞‡∏Ç‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô <br>
                    - <span style="font-weight: bold;">Recycling Rate</span> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ <br>
                    - <span style="font-weight: bold;">Recycling Percentage</span> ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå <br>
                    - <span style="font-weight: bold;">Recycling Trend</span> ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏Ç‡∏¢‡∏∞ <br>
                    - <span style="font-weight: bold;">Population</span> ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• <br>
                    - <span style="font-weight: bold;">Recycling Policy Level</span> ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô <br>
    </p>""", unsafe_allow_html=True)
        df = pd.read_csv(r"dataset/thai_plastic_bottle_waste_monthly_dataset_with_missing.csv")
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV
    </h5>""", unsafe_allow_html=True)
        st.dataframe(df)
        st.markdown("""<p style='font-family: Athiti; text-align: center;'>
                    <span style="font-weight: bold;">‡πÇ‡∏î‡∏¢‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á</span> <br> <br>
    </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    Feature Engineering
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    <span style="font-weight: bold;">1. YEAR:</span> ‡∏õ‡∏µ‡∏à‡∏≤‡∏Å DATE - ‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏õ‡∏µ <br>
                    <span style="font-weight: bold;">2. MONTH:</span> ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å DATE - ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô <br>
                    <span style="font-weight: bold;">3. WASTE_PER_CAPITA:</span> ‡∏Ç‡∏¢‡∏∞ (‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î) √∑ ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ (‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ô) - ‡∏Ç‡∏¢‡∏∞‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô <br>
                    <span style="font-weight: bold;">4. RECYCLING_PER_CAPITA:</span> ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• (‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î) √∑ ‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ (‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ô) - ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô <br>
                    <span style="font-weight: bold;">5. UNRECYCLED_WASTE:</span> ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• - ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ <br>
                    <span style="font-weight: bold;">6. RECYCLING_PERCENTAGE_CHANGE:</span> % ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô - ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á <br>
                    <span style="font-weight: bold;">7. RECYCLING_TREND_CHANGE:</span> ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (0-100) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô - ‡∏ß‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ <br>
                    <span style="font-weight: bold;">8. POLICY_LEVEL_CATEGORY:</span> 0-3 ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ (NO POLICY, BASIC, MODERATE, ADVANCED) - ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ <br>
                    <span style="font-weight: bold;">9. CALCULATED_RECYCLING_PERCENTAGE:</span> ‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• √∑ ‡∏Ç‡∏¢‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î √ó 100 - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢ <br><br>
</p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ Missing Data ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Train Model
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    <span style="font-weight: bold;">‡∏ó‡∏≥‡πÑ‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢?</span>
                    <span style="font-weight: bold;">‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß:</span> ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∞‡πÑ‡∏£‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÅ‡∏Ñ‡πà‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ <br>
                    <span style="font-weight: bold;">‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•:</span> ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏´‡∏ô‡∏∂‡πà‡∏á <br>
                    <span style="font-weight: bold;">‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏°‡∏≤‡∏Å:</span> ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏ß‡∏∑‡∏≠‡∏´‡∏ß‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡πá‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏¢‡∏±‡∏á‡∏î‡∏π‡∏™‡∏°‡∏î‡∏∏‡∏• <br> <br>
    </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
                    ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏î‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    <span style="font-weight: bold;">‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: </span>‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡πÄ‡∏ä‡πà‡∏ô ‡∏†‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥) ‡∏ã‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô <br>
                    <span style="font-weight: bold;">‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠: </span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á missing values ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° <br>
                    <span style="font-weight: bold;">‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£: </span>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏±‡∏Å‡∏î‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (imputation) ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ (robust analysis) ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≠‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß <br>
    </p>""", unsafe_allow_html=True)

    with tab3:
        st.markdown("""<h4 style='font-family: Athiti; text-align: center;text-indent: 2.5em;'>
    Detail of DataSet (NN)üß∏
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    Code ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti;'>
    1.‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏ä‡πà‡∏ô pandas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, torch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•, ‡πÅ‡∏•‡∏∞ wandb ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å
    </h5>""", unsafe_allow_html=True)
        code = '''import wandb
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import random
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import Dataset, DataLoader
from torch.optim.lr_scheduler import ReduceLROnPlateau

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö GPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Initialize Weights & Biases
wandb.init(project="traffic-prediction", name="pytorch-improved-model")
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='font-family: Athiti;'>
    2.‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•, ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤, ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå, ‡πÅ‡∏•‡∏∞‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
    </h5>""", unsafe_allow_html=True)
        code = '''# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
locations = [
    "‡∏™‡∏¢‡∏≤‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏Å‡∏≠‡∏ô", "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏™‡∏∏‡∏ß‡∏£‡∏£‡∏ì‡∏†‡∏π‡∏°‡∏¥", "‡∏™‡∏ô‡∏≤‡∏°‡∏ö‡∏¥‡∏ô‡∏î‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î‡∏à‡∏ï‡∏∏‡∏à‡∏±‡∏Å‡∏£", "‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏£‡∏±‡∏•‡πÄ‡∏ß‡∏¥‡∏•‡∏î‡πå",
    "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥", "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏∞", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏´‡∏°‡∏≠‡∏ä‡∏¥‡∏ï", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏°‡∏±‡∏¢", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏´‡∏±‡∏ß‡∏•‡∏≥‡πÇ‡∏û‡∏á",
    "‡∏û‡∏±‡∏ó‡∏¢‡∏≤", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà", "‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤", "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤", "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏´‡∏±‡∏ß‡∏´‡∏¥‡∏ô"
]

festivals = ["‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå", "‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà", "‡∏•‡∏≠‡∏¢‡∏Å‡∏£‡∏∞‡∏ó‡∏á", "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡∏≠‡∏°", "‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡∏≠‡∏°", "‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏Å‡∏Ç‡∏±‡∏ï‡∏§‡∏Å‡∏©‡πå", "‡∏ß‡∏±‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡∏ß‡∏±‡∏ô‡∏ß‡∏¥‡∏™‡∏≤‡∏Ç‡∏ö‡∏π‡∏ä‡∏≤", "‡∏ß‡∏±‡∏ô‡∏°‡∏≤‡∏Ü‡∏ö‡∏π‡∏ä‡∏≤"]

time_periods = ["06:00-09:00", "09:00-12:00", "12:00-15:00", "15:00-18:00", "18:00-21:00", "21:00-00:00"]

days_of_week = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]

weather_conditions = ["‡πÅ‡∏î‡∏î‡∏≠‡∏≠‡∏Å", "‡∏ù‡∏ô‡∏ï‡∏Å", "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å", "‡∏´‡∏°‡∏≠‡∏Å"]
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    3.‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á 1 ‡∏•‡πâ‡∏≤‡∏ô‡πÅ‡∏ñ‡∏ß ‡πÇ‡∏î‡∏¢‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÉ‡∏ô Cell 2
‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏£‡∏≤‡∏à‡∏£ (traffic_level) ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (travel_time) 
    </h5>""", unsafe_allow_html=True)

        code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1,000,000 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
data = []
for _ in range(1_000_000):
    start_location = random.choice(locations)
    end_location = random.choice(locations)
    while start_location == end_location:
        end_location = random.choice(locations)

    time_period = random.choice(time_periods)
    year = random.randint(1999, 2024)
    festival = random.choice(festivals)
    day_of_week = random.choice(days_of_week)
    weather = random.choice(weather_conditions)
    distance = random.uniform(1.0, 300.0)
    population_density = random.randint(1000, 20000)

    base_traffic = 1
    base_time = distance * 2

    if time_period in ["06:00-09:00", "15:00-18:00"]:
        base_traffic += 2
        base_time *= 1.5

    if festival in ["‡∏™‡∏á‡∏Å‡∏£‡∏≤‡∏ô‡∏ï‡πå", "‡∏õ‡∏µ‡πÉ‡∏´‡∏°‡πà"]:
        base_traffic += 3
        base_time *= 2.0
    elif festival == "‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ó‡∏≠‡∏°" and day_of_week not in ["‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]:
        base_traffic += 2
        base_time *= 1.3

    if weather == "‡∏ù‡∏ô‡∏ï‡∏Å":
        base_traffic += 1
        base_time *= 1.2
    elif weather == "‡∏ù‡∏ô‡∏ï‡∏Å‡∏´‡∏ô‡∏±‡∏Å":
        base_traffic += 2
        base_time *= 1.5
    elif weather == "‡∏´‡∏°‡∏≠‡∏Å":
        base_traffic += 1
        base_time *= 1.3

    if population_density > 15000:
        base_traffic += 1
        base_time *= 1.2

    traffic_level = min(max(int(base_traffic + random.uniform(-0.5, 0.5)), 1), 4)
    travel_time = max(base_time + random.uniform(-10, 10), 5)

    data.append([start_location, end_location, time_period, year, festival, day_of_week, weather, distance, population_density, traffic_level, travel_time])

# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
columns = ["Start_Location", "End_Location", "Time_Period", "Year", "Festival", "Day_of_Week", "Weather", "Distance", "Population_Density", "Traffic_Level", "Travel_Time"]
df = pd.DataFrame(data, columns=columns)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    4.‡πÉ‡∏ä‡πâ LabelEncoder ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó categorical (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà, ‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å (80%) ‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (20%)
    </h5>""", unsafe_allow_html=True)
        
        code = '''# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• categorical ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
le_start = LabelEncoder()
le_end = LabelEncoder()
le_time = LabelEncoder()
le_festival = LabelEncoder()
le_day = LabelEncoder()
le_weather = LabelEncoder()

df["Start_Location"] = le_start.fit_transform(df["Start_Location"])
df["End_Location"] = le_end.fit_transform(df["End_Location"])
df["Time_Period"] = le_time.fit_transform(df["Time_Period"])
df["Festival"] = le_festival.fit_transform(df["Festival"])
df["Day_of_Week"] = le_day.fit_transform(df["Day_of_Week"])
df["Weather"] = le_weather.fit_transform(df["Weather"])

# Normalize ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
scaler_X = StandardScaler()
scaler_y = StandardScaler()

X = df[["Start_Location", "End_Location", "Time_Period", "Year", "Festival", "Day_of_Week", "Weather", "Distance", "Population_Density"]].values
y = df[["Traffic_Level", "Travel_Time"]].values

X = scaler_X.fit_transform(X)
y = scaler_y.fit_transform(y)

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô wandb
wandb.log({"train_samples": len(X_train), "test_samples": len(X_test)})
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    5.‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ TrafficDataset ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà PyTorch ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ , ‡∏™‡∏£‡πâ‡∏≤‡∏á DataLoader ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô batch ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    </h5>""", unsafe_allow_html=True)
        
        code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á Dataset ‡πÅ‡∏•‡∏∞ DataLoader
class TrafficDataset(Dataset):
    def __init__(self, X, y):
        self.X = torch.tensor(X, dtype=torch.float32).to(device)
        self.y = torch.tensor(y, dtype=torch.float32).to(device)

    def __len__(self):
        return len(self.X)

    def __getitem__(self, idx):
        return self.X[idx], self.y[idx]

train_dataset = TrafficDataset(X_train, y_train)
test_dataset = TrafficDataset(X_test, y_test)

train_loader = DataLoader(train_dataset, batch_size=128, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=128, shuffle=False)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    6.‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏ó‡∏µ‡πà‡∏°‡∏µ 5 ‡∏ä‡∏±‡πâ‡∏ô (fully connected layers) ‡πÅ‡∏•‡∏∞
‡πÄ‡∏û‡∏¥‡πà‡∏° ReLU ‡πÄ‡∏õ‡πá‡∏ô activation function ‡πÅ‡∏•‡∏∞ Dropout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô overfitting
    </h5>""", unsafe_allow_html=True)
        
        code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
class ImprovedTrafficNet(nn.Module):
    def __init__(self, input_size):
        super(ImprovedTrafficNet, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc4 = nn.Linear(32, 16)
        self.fc5 = nn.Linear(16, 2)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.relu(self.fc2(x))
        x = self.dropout(x)
        x = self.relu(self.fc3(x))
        x = self.relu(self.fc4(x))
        x = self.fc5(x)
        return x

# Initialize ‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = ImprovedTrafficNet(input_size=X_train.shape[1]).to(device)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    7.‡∏Å‡∏≥‡∏´‡∏ô‡∏î loss function (MSELoss), optimizer (Adam), ‡πÅ‡∏•‡∏∞ scheduler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö learning rate
‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• 100 epochs ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì loss ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô wandb
    </h5>""", unsafe_allow_html=True)
        
        code = '''# Define loss ‡πÅ‡∏•‡∏∞ optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.0001, weight_decay=1e-5)
scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.5, patience=5, verbose=True)

# ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•
num_epochs = 100
best_val_loss = float('inf')
patience = 10
counter = 0

for epoch in range(num_epochs):
    model.train()
    train_loss = 0
    for X_batch, y_batch in train_loader:
        optimizer.zero_grad()
        outputs = model(X_batch)
        loss = criterion(outputs, y_batch)
        loss.backward()
        optimizer.step()
        train_loss += loss.item()

    model.eval()
    val_loss = 0
    with torch.no_grad():
        for X_batch, y_batch in test_loader:
            outputs = model(X_batch)
            loss = criterion(outputs, y_batch)
            val_loss += loss.item()

    train_loss = train_loss / len(train_loader)
    val_loss = val_loss / len(test_loader)

    wandb.log({"epoch": epoch + 1, "train_loss": train_loss, "val_loss": val_loss})
    print(f"Epoch {epoch+1}/{num_epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}")

    scheduler.step(val_loss)

    if val_loss < best_val_loss:
        best_val_loss = val_loss
        counter = 0
        torch.save(model.state_dict(), "best_traffic_prediction_model.pt")
    else:
        counter += 1
        if counter >= patience:
            print("Early stopping triggered.")
            break
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.image("img/Accuracy Model/W&B Chart 3_9_2025, 8_53_00 PM.png", caption="Accuracy Model Neural Network")

    with tab4:
        st.markdown("""<h4 style='font-family: Athiti; text-align: center;text-indent: 2.5em;'>
    Development Model
    </h4>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti; text-indent: 2.5em;'>
    ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning
    </h5>""", unsafe_allow_html=True)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á Model Machine Learning ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à <br> <br>
     </p>""", unsafe_allow_html=True)
        st.markdown("""<h5 style='font-family: Athiti;'>
    1.‡∏Å‡πá‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏¢‡∏∞‡∏û‡∏•‡∏≤‡∏™‡∏ï‡∏¥‡∏Å‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    </h5>""", unsafe_allow_html=True)
        code = '''df = pd.read_csv("thai_plastic_bottle_waste_monthly_dataset_with_missing.csv")
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>2.‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏¢‡∏Å‡∏™‡πà‡∏ß‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    </h5>""", unsafe_allow_html=True)
        code = '''df['Year'] = df['Date'].apply(lambda x: int(x.split('-')[0]))
df['Month'] = df['Date'].apply(lambda x: int(x.split('-')[1]))
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>3.‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏¢‡∏∞‡∏ï‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </h5>""", unsafe_allow_html=True)
        code = '''df['Waste_per_Population'] = df['Plastic Bottle Waste Generated (Million Bottles)'] / df['Population (Million)']
df['Waste_Policy_Interaction'] = df['Plastic Bottle Waste Generated (Million Bottles)'] * df['Recycling Policy Level (0-3)']
df['Trend_Policy_Interaction'] = df['Recycling Trend (0-100)'] * df['Recycling Policy Level (0-3)']
df['Year_Trend'] = df['Year'] * df['Recycling Trend (0-100)'])
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>4.‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (11 ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </h5>""", unsafe_allow_html=True)
        
        code = '''features = ['Year', 'Month', 'Plastic Bottle Waste Generated (Million Bottles)', 
            'Recycling Percentage (%)', 'Recycling Trend (0-100)', 
            'Population (Million)', 'Recycling Policy Level (0-3)', 
            'Waste_per_Population', 'Waste_Policy_Interaction', 'Trend_Policy_Interaction', 'Year_Trend']
X = df[features]
y = df['Recycling Rate (Million Bottles)']
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>5.‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÉ‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    </h5>""", unsafe_allow_html=True)
        code = '''imputer = KNNImputer(n_neighbors=5, weights='distance')
X_imputed = pd.DataFrame(imputer.fit_transform(X), columns=features)
y_imputed = pd.Series(imputer.fit_transform(y.values.reshape(-1, 1)).flatten(), name=y.name)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>6.‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    </h5>""", unsafe_allow_html=True)
        code = '''mask = X_imputed.notna().all(axis=1) & y_imputed.notna()
X_imputed = X_imputed[mask]
y_imputed = y_imputed[mask]
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>7.‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Å‡∏≥‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (outliers) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    </h5>""", unsafe_allow_html=True)
        code = '''def remove_outliers(df_col):
    z_scores = (df_col - df_col.mean()) / df_col.std()
    return df_col[abs(z_scores) < 3]

for col in X_imputed.columns:
    X_imputed[col] = remove_outliers(X_imputed[col])
y_imputed = remove_outliers(y_imputed)

mask = X_imputed.notna().all(axis=1) & y_imputed.notna()
X_imputed = X_imputed[mask]
y_imputed = y_imputed[mask]
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>8.‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô 80:20 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•
    </h5>""", unsafe_allow_html=True)
        code = '''X_train, X_test, y_train, y_test = train_test_split(X_imputed, y_imputed, test_size=0.2, random_state=42)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>9.‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    </h5>""", unsafe_allow_html=True)
        code = '''scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>SVR Model
    </h5>""", unsafe_allow_html=True)
        code = '''svr = SVR(kernel='rbf')
param_grid_svr = {'C': [50, 100, 200], 'epsilon': [0.01, 0.1], 'gamma': ['scale', 0.01, 0.1]}
grid_search_svr = GridSearchCV(svr, param_grid_svr, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_svr.fit(X_train_scaled, y_train)
best_svr = grid_search_svr.best_estimator_
y_pred_svr = best_svr.predict(X_test_scaled)
svr_mse = mean_squared_error(y_test, y_pred_svr)
svr_r2 = r2_score(y_test, y_pred_svr)
print("SVR - MSE:", svr_mse, "R¬≤:", svr_r2)
with open('svr_model_new.pkl', 'wb') as f:
    pickle.dump(best_svr, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                       ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• 
                    <span style="background-color: #990000;">SVR (Support Vector Regression)</span>
                    ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏•‡πÅ‡∏ö‡∏ö rbf ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå 
                    ‡πÄ‡∏ä‡πà‡∏ô C (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÇ‡∏ó‡∏©‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î), epsilon (‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ), 
                    ‡πÅ‡∏•‡∏∞ gamma (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á) ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ GridSearchCV ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∏‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô 5 ‡∏™‡πà‡∏ß‡∏ô (5-fold cross-validation) 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô (MSE) ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ MSE (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢) 
                    ‡πÅ‡∏•‡∏∞ R¬≤ (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•) ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    </p>""", unsafe_allow_html=True)
        
        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>Decision Tree Regressor
    </h5>""", unsafe_allow_html=True)
        code = '''dt = DecisionTreeRegressor(random_state=42)
param_grid_dt = {'max_depth': [5, 7, 10], 'min_samples_split': [2, 5, 10], 'min_samples_leaf': [1, 2, 4]}
grid_search_dt = GridSearchCV(dt, param_grid_dt, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_dt.fit(X_train_scaled, y_train)
best_dt = grid_search_dt.best_estimator_
y_pred_dt = best_dt.predict(X_test_scaled)
dt_mse = mean_squared_error(y_test, y_pred_dt)
dt_r2 = r2_score(y_test, y_pred_dt)
print("Decision Tree - MSE:", dt_mse, "R¬≤:", dt_r2)
with open('dt_model_new.pkl', 'wb') as f:
    pickle.dump(best_dt, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                       ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• 
                    <span style="background-color: #990000;">Decision Tree Regressor</span>
                    ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πà‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ random_state 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô max_depth (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô), 
                    min_samples_split (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏Å‡∏¥‡πà‡∏á), ‡πÅ‡∏•‡∏∞ min_samples_leaf (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÉ‡∏ô‡πÉ‡∏ö) 
                    ‡πÉ‡∏ä‡πâ GridSearchCV ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö 5-fold cross-validation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î MSE ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å 
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MSE ‡πÅ‡∏•‡∏∞ R¬≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    </p>""", unsafe_allow_html=True)
        
        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>KNeighborsRegressor (KNN)
    </h5>""", unsafe_allow_html=True)
        code = '''knn = KNeighborsRegressor()
param_grid_knn = {'n_neighbors': [3, 5, 7], 'weights': ['uniform', 'distance'], 'p': [1, 2]}
grid_search_knn = GridSearchCV(knn, param_grid_knn, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_knn.fit(X_train_scaled, y_train)
best_knn = grid_search_knn.best_estimator_
y_pred_knn = best_knn.predict(X_test_scaled)
knn_mse = mean_squared_error(y_test, y_pred_knn)
knn_r2 = r2_score(y_test, y_pred_knn)
print("KNN - MSE:", knn_mse, "R¬≤:", knn_r2)
with open('knn_model_new.pkl', 'wb') as f:
    pickle.dump(best_knn, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• 
                    <span style="background-color: #990000;">KNeighborsRegressor (KNN)</span>
                    ‡∏ã‡∏∂‡πà‡∏á‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô n_neighbors (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢), 
                    weights (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á), ‡πÅ‡∏•‡∏∞ p (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÅ‡∏ö‡∏ö Manhattan ‡∏´‡∏£‡∏∑‡∏≠ Euclidean) 
                    ‡πÉ‡∏ä‡πâ GridSearchCV ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ 5-fold cross-validation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î MSE ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡πÅ‡∏•‡πâ‡∏ß 
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ MSE ‡πÅ‡∏•‡∏∞ R¬≤ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠
    </p>""", unsafe_allow_html=True)
        
        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>Random Forest
    </h5>""", unsafe_allow_html=True)
        code = '''rf = RandomForestRegressor(random_state=42)
param_grid_rf = {'n_estimators': [100, 200], 'max_depth': [10, 15, 20], 'min_samples_split': [2, 5]}
grid_search_rf = GridSearchCV(rf, param_grid_rf, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_rf.fit(X_train_scaled, y_train)
best_rf = grid_search_rf.best_estimator_
y_pred_rf = best_rf.predict(X_test_scaled)
rf_mse = mean_squared_error(y_test, y_pred_rf)
rf_r2 = r2_score(y_test, y_pred_rf)
print("Random Forest - MSE:", rf_mse, "R¬≤:", rf_r2)
with open('rf_model_new.pkl', 'wb') as f:
    pickle.dump(best_rf, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• 
                    <span style="background-color: #990000;">Random Forest Regressor</span>
                    ‡∏ã‡∏∂‡πà‡∏á‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏≤‡∏¢ ‡πÜ Decision Tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ random_state 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô n_estimators (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ), max_depth (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
                    , ‡πÅ‡∏•‡∏∞ min_samples_split (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å) ‡πÉ‡∏ä‡πâ GridSearchCV ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ 5-fold cross-validation 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î MSE ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏• ‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ MSE ‡πÅ‡∏•‡∏∞ R¬≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    </p>""", unsafe_allow_html=True)
        
        st.markdown("""<h5 style='font-family: Athiti;'>
    <br>SVR Linear
    </h5>""", unsafe_allow_html=True)
        code = '''svm_reg = SVR(kernel='linear')
param_grid_svm = {'C': [10, 50, 100], 'epsilon': [0.01, 0.1, 0.5]}
grid_search_svm = GridSearchCV(svm_reg, param_grid_svm, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_svm.fit(X_train_scaled, y_train)
best_svm = grid_search_svm.best_estimator_
y_pred_svm = best_svm.predict(X_test_scaled)
svm_mse = mean_squared_error(y_test, y_pred_svm)
svm_r2 = r2_score(y_test, y_pred_svm)
print("SVM Linear - MSE:", svm_mse, "R¬≤:", svm_r2)
with open('svm_linear_model_new.pkl', 'wb') as f:
    pickle.dump(best_svm, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• 
                    <span style="background-color: #990000;">SVR ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏• linear</span>
                    ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÄ‡∏ä‡πà‡∏ô C (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î) 
                    ‡πÅ‡∏•‡∏∞ epsilon (‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô) ‡πÉ‡∏ä‡πâ GridSearchCV ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ 5-fold cross-validation 
                    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î MSE ‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ MSE ‡πÅ‡∏•‡∏∞ R¬≤ ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    </p>""", unsafe_allow_html=True)
        
        with tab5:
            st.markdown("""<h4 style='font-family: Athiti; text-align: center;text-indent: 2.5em;'>
    Theory of ML Modelüìë
    </h4>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='font-family: Athiti;'>
    ‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏Ç‡∏≠‡∏á Model Machine Learning ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ
    </h5>""", unsafe_allow_html=True)
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    SVR (Support Vector Regression)
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†<span style="background-color: #E22427;">SVR ‡∏´‡∏£‡∏∑‡∏≠ Support Vector Regression</span>
                        ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡∏Å‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Å‡πà‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 
                        ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡πÅ‡∏•‡∏∞‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏°‡∏µ "‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï" (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ epsilon) 
                        ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ "‡∏ú‡∏¥‡∏î‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£" ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏¢‡∏∞‡πÄ‡∏¢‡∏≠‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏ï‡πà‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏° SVR ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ô‡∏• (‡πÄ‡∏ä‡πà‡∏ô rbf) 
                        ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (support vectors) ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    </p>""", unsafe_allow_html=True)
            st.image("img/Illustration-of-the-Machine-Learning-ML-regression-models-A-SVR-example-of-a.png",caption="SVR")

            st.markdown("""<h5 style='font-family: Athiti;'>
    Decision Tree Regressor
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†<span style="background-color: #E22427;">Decision Tree Regressor</span>
                        ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡πÜ 
                        ‡πÄ‡∏ä‡πà‡∏ô "‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î‡πÑ‡∏´‡∏°?" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô?" 
                        ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡∏Å‡∏Å‡∏¥‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏¢‡∏∞‡πÄ‡∏¢‡∏≠‡∏∞‡∏Å‡πá‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡πá‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å‡∏ó‡∏≤‡∏á ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á "‡πÉ‡∏ö" ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 
                        ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• 5 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢ ‡πÜ ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° 
                        ‡∏°‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (overfitting) ‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
    </p>""", unsafe_allow_html=True)
            st.image("img/DT.png",caption="Decision Tree Regressor")
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    KNeighborsRegressor (KNN)
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†<span style="background-color: #E22427;">KNN ‡∏´‡∏£‡∏∑‡∏≠ KNeighborsRegressor</span>
                        ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢ "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á" ‡∏°‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏î‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• 
                        ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏¢‡∏∞ 12 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏î ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö 2 ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ö‡πâ‡∏≤‡∏á?" 
                        ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô" ‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô 3 ‡∏´‡∏£‡∏∑‡∏≠ 5 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ô) ‡∏°‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô KNN 
                        ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡πÅ‡∏Ñ‡πà‡∏à‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡πÜ ‡πÑ‡∏ß‡πâ ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö ‡∏°‡∏±‡∏ô‡∏à‡∏∞‡πÄ‡∏î‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡∏™‡∏±‡∏ö‡∏™‡∏ô‡πÑ‡∏î‡πâ
    </p>""", unsafe_allow_html=True)
            st.image("img/KNN.png",caption="KNeighborsRegressor")
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    Random Forest Regressor
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†<span style="background-color: #E22427;">Random Forest Regressor</span> 
                        ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Decision Trees) ‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏¥‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡πâ‡∏≠‡∏¢‡∏ï‡πâ‡∏ô 
                        ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡πÄ‡∏î‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡∏à‡∏≤‡∏Å‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡∏π‡∏Ç‡∏¢‡∏∞ ‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡∏π‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡∏≠‡∏µ‡∏Å‡∏ï‡πâ‡∏ô‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏• ‡πÅ‡∏•‡πâ‡∏ß Random Forest 
                        ‡∏à‡∏∞‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡πâ‡∏ô‡∏°‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡∏°‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà Decision Tree ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡∏≤‡∏à‡πÄ‡∏î‡∏≤‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≥‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ 
                        ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£ "‡πÇ‡∏´‡∏ß‡∏ï" ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ó‡∏ô‡∏ó‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏Å ‡πÜ ‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏¥‡∏î‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢
    </p>""", unsafe_allow_html=True)
            st.image("img/RDF.png",caption="Random Forest Regressor")
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    SVR Linear
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†<span style="background-color: #E22427;">SVR Linear</span> 
                        ‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á SVR ‡πÅ‡∏ï‡πà‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á ‡∏°‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å 
                        ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Ç‡∏¢‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ã‡πÄ‡∏Ñ‡∏¥‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ SVR Linear ‡∏à‡∏∞‡∏•‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï (epsilon) 
                        ‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏à‡∏∞‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô ‡∏°‡∏±‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ SVR ‡πÅ‡∏ö‡∏ö rbf ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏π‡∏á 
                        ‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏£‡∏á
    </p>""", unsafe_allow_html=True)
            st.image("img/SVRL.png",caption="SVR Linear")

            st.markdown("""<h5 style='font-family: Athiti;'>
    <br>Metrics ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                        ¬†¬†¬†‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ
                        ‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ô‡∏≥ 
                        Metrics ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ <br> 
                        <span style="font-weight: bold;">MAE (Mean Absolute Error)</span> <br>
                        <span style="font-weight: bold;">RMSE (Root Mean Squared Error)</span> <br>
                        <span style="font-weight: bold;">R¬≤ (R-Squared)</span> <br>
                        <span style="font-weight: bold;">MAPE (Mean Absolute Percentage Error)</span> <br>
                        <span style="font-weight: bold;">Accuracy (%)</span> <br> <br>
    </p>""", unsafe_allow_html=True)
            st.markdown("""<h5 style='font-family: Athiti;'>
    MAE (Mean Absolute Error)
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†MAE ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ö‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö
                    ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á ‡πÜ ‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ  ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ 
                    ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå(Absolute) ‡πÅ‡∏ó‡∏ô
    </p>""", unsafe_allow_html=True)
            st.latex(r'''
                    MAE = \frac{1}{n}  Œ£|y_i ‚Äì ≈∑_i|
                    ''')
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    RMSE (Root Mean Squared Error)
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†RMSE ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á 
                    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡πÉ‡∏î
                    ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡∏ö‡∏ß‡∏Å‡∏•‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏á ‡πÜ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏±‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 
                    ‡πÅ‡∏ï‡πà‡∏û‡∏≠‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏° 
                    ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á ‡∏ñ‡∏≠‡∏î‡∏£‡∏π‡∏ó‡∏Å‡∏•‡∏±‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÜ
    </p>""", unsafe_allow_html=True)
            st.latex(r'''
                    \text{RMSE} = \sqrt{\frac{1}{n}  \sum_{i=1}^{n} (\text{prediction}_i - \text{actual}_i)^2}
                    ''')
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    R¬≤ (R-Squared)
    </h5>""", unsafe_allow_html=True)
            
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†R¬≤ ‡∏´‡∏£‡∏∑‡∏≠ Coefficient of Determination ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏£‡∏õ‡∏£‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
                    ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô
    </p>""", unsafe_allow_html=True)
            st.latex(r'''
                    R^2 = 1 - \frac{\sum_{i=1}^{n} (\text{actual}_i - \text{prediction}_i)^2}{\sum_{i=1}^{n} (\text{actual}_i - \bar{\text{actual}})^2}
                    ''')
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    MAPE
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†MAPE ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
                    ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏õ‡∏Å‡∏µ‡πà‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á 
    </p>""", unsafe_allow_html=True)
            st.latex(r'''
                    \text{MAPE} = \frac{1}{n} \sum_{i=1}^{n} \left| \frac{\text{actual}_i - \text{prediction}_i}{\text{actual}_i} \right| \times 100
                    ''')
            
            st.markdown("""<h5 style='font-family: Athiti;'>
    Accracy
    </h5>""", unsafe_allow_html=True)
            st.markdown("""<p style='font-family: Athiti; text-align: justify;'>
                    ¬†¬†¬†Accuracy ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ MAPE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    </p>""", unsafe_allow_html=True)
            st.latex(r'''
                    Accuracy = 100 - MAPE
                    ''')
            
            st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Athiti:wght@400&display=swap');
        .about-container {
            text-align: center;
            font-family: 'Athiti', sans-serif !important;
            font-size: 16px;
            font-weight: 400;
            line-height: 1.6;
            color: #ffffff;
        }
        .about-container h5 {
            font-family: 'Athiti', sans-serif !important;
            font-size: 20px;
            color: #ffffff;
            margin: 0;
        }
        .stApp {
            background-color: #121212;
        }
    </style>
    <div class="about-container">
        <h5>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•</h5>
    </div>
""", unsafe_allow_html=True)
            df = pd.read_csv(r"dataset/model_performance.csv")
            st.dataframe(df)
            st.image("img/Accuracy Model/MAE.png", caption="MAE")
            st.image("img/Accuracy Model/RMSE.png", caption="RMSE")
            st.image("img/Accuracy Model/R2.png", caption="R¬≤")
            st.image("img/Accuracy Model/Accuracy.png", caption="Accuracy")